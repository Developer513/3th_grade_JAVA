제네릭과 컬렉션
유용한 클래스 
제네릭: 다양한데이터의 종류를 사용하기 쉽게 만드는 것 
컬렉션 : 데이터의 모음
요소 객체들의 저장소 
객체 컨테이너라고도 불림 
삽입 삭제대 따른 요소의 위치자동 
여러형태 : 집합, 리스트, 배열 
컬렉션은 배열과 비슷함 
그러나 배열은 크기가 고정되어 있고 컬렉션은 필요에 따라 공간이 늘어나거나 줄어듦 알아서 해준다. 

collection<E> 인터페이스 

Set<E>         List<E>                  Queue<E>
  |              |    \     \\              |
HashSet  ArraytList<E> Vector<E> LinkedList<E>        

컬렉션은 데이터의 모음 인데 데이터는 타입이 여러개다(정수,실수, 문자열...)
컬렉션은 제네릭 기법으로 구현됨 
제네릭은 타입이 다른 데이터를 한꺼번에 처리하게 해줌 

컬렉션의요소는 객체만 가능 기본타입은 x

제네릭은 특정 타입만 다루지 않고 여러 종류의 타입으로 변신할 수 있도록 클래스나 메소드를 일반화 시키는 기법
<E> ,<K> 

스택을 만들겠다
제네릭 스택 : Stack<E> -> E는타입매개변수라고 함 이 자리에 Integer, double 가 들어갈수 있음
정수만 다루는 스택, 더블만 다루는 스택 이렇게 쓸 수 있음 

Stack<E> 로 한 개의 클래스를 만드는데  정수만 다룰려면 Stack<Integer> 

class Stack<E>{
    void push (E element){
        E pop(){}
    }

}

위와 같은 스택 클래스가 있을때 

제네릭이 없으면 정수를 다루는 푸시, 팝
문자열을 다루는 푸시, 팝 따로 만들어야 하는데 제네릭은 이걸 한꺼번에 할 수 있게 한다. 

정수 void push(Integer element)
선언하는 객체 Stack<Integer>  을 선언해서 그대로 호출해 쓰면 된다.

Vector<E>의 특성 배열과 유사한 것이다. 배열대신에도씀 

java.util.Vector 
이 클래스는 여러 객체들을 삽입 삭제 검색 하는 기능들이 잇다. 
배열의 길이제한을 극복 자동으로 조정됨 
<E> 에서 E 대신 요소로 사용할 특정 타입으로 구체화 

Vector에 삽입 가능한 것 
객체, NULL, rlqhsvkdlqdms Wrapper 객체로 만들어 저장 

Vector에 객체 삽입
맨뒤에 추가 
중간에도 삽입가능

Vector<Integer> v = new Vector<Integer>(); 객체선언 방식 

add()
get() 구체적인 내부 구조를 몰라도 쓸수 있다는게 장점 캡슐화 은닉화 

꼭 Vector<Object> 등 과같이 타입 매개변수를 꼭 사용해야한다 아니면 오류남

주요 메소드를
boolean add(E element) 맨뒤에 element 추가 
void add(int index, E element) 특정 인덱스에 추가 


컬렉션과 자동 방식/언박싱
기본타입 데이터를 Wrapper 클래스를 이용하여 객체로 만들어 사용했었음 
Vector<Integer> v = new Vectot<Integer>();
v.add(Integer.valueOf(4)) // 이런식으로 객체형식으로 4를 추가하고 
불러올때도 Intrger n = (Integer)v.get(0);
int k = n.intValue(); // k=4 이런식으로 () Wrapper 클래스로 캐스팅이 필요했다 

근데jdk 1.5 부터 자동 언박싱 박싱을 지원하여 기본타입으로도 사용ㅅ가능 개꿀 
근데 제네릭 객체 선언 시에는 꼭 클래스 타입으로 
Vector < int> x


Point 클래스를 다루는 Vector<Point>

java 10 이후로 
var 키워드 도입 , 컴파일러의 지역변수 타입 추론 가능 

자 벡터는 배열대신에 사용할 수 있는 컬렉션이다. 

ArrayList<E> 특성
java.util.ArraytList 가변크기 배열을 구현한 클래스 
벡터랑 거의 같음 

근데 벡터와 달리 스레드동기화 기능이 없음 
다수 스레드가 동시에 ArrayList에 접근할 때 동기화 되지 않음 
개발자가 스레드 동기화 코드 작성 

스레드를 사용하지 않는다면 어레이 리스트가 효율적 

ArrayList<String> al = new ArrayList<String> ()
커패시티 메소드가 없음 

컬렉션의 순차 검색을 위한 Iterator() 반복자)
제네릭

Iterator<E>  인터페이스 기존에 사용하던 scanner.next()+hasnext() 와 비슷함 
스트링 토크나이저 같이 문자열을 구분자를 기준으로 토큰으로 쪼개는 예제 

Vector, ArrayList LinkedList. 가 상속받는 인터페이스이다. 

사용 예 

Vectot<Integer> v - new Vector<Integer>();
Iterator<Integer> it = v.iterator(); 스캐너와 비슷하다 객체형식으로 선언해서 메소드로 사용 
while(it.hasnext()){//모든요소 방문
    int n = it.next();//다음요소 리턴 
}

Hashmap<k,v> 타입 매개변수가 두개임 
키와 값의 쌍으로 구성된느 요소를 다루는 컬렉션 
java.util.Hashmap
사전을 생각 어떤 단어를 찾을 때 찾고자 하는 단어가 키 단어의 의미가 값이다. 
값을 검색하기 위해서는 반드시 키를 이용해야하한다ㅣ 
요소삽입 put();
요소 검색 get();

Hashmap<String, String> map = new Hashmap<String, String>()

String 키 와 String 값을 저장할 저장공간 2개 생성 

map.put(a,g); 쌍 단위로 넣는다. 
객체를 값으로 할 수도 있음 

LinkedList<E>
java.util.LinkedList 
리스트 인터페ㅣ스를 구현한 컬력션 클래스가
벡터, 어레이 리스트랑 비슷함 
요소가 서로 양방향 연결됨
요소 객체는 맨 앞 맨뒤에 추가 가능
요소 객체는 인덱스를 이용하여 중간에 삽입가능 
맨 앞이나 맨 뒤에 요소를 추가하거나 삭제 가능, 스택 큐 로 사용가능ㄹ 

Collection 클래스 
java.util 패키지 
컬렉션에 대해 연산을 수행하고 결과로 컬렉션 리턴 
모든 메소드는 static 타입
컬렉션 요소 정렬 기능
스태틱 타입은 따로 객체를 형성해서 메모리를 할당하지 않아도 이미 있기때문에 바로 클래스로 메소드 호출가능 

제네릭 만들기 

제네릭 클래스와 인터페이스 
클래스나 인터페이스 선언부에 일반화된 타입 추가 
임의의 형식으로 선언하여 클래스를 만들고 나중에 타입에 맞는 변수를 넣을 수 있음 

타입 매개변수가 나타내는 타입의 객체는 생성이 불가 
T a = new T(); 

제네릭에서 배열의 제한 
제네릭 클래스 또는 인터페이스의 배열을 허용하지 않음 

제네릭의 장점
컴파일 시에 타입이 결정되어 보다 안전한 프로그래밍 가능 
런타임 타입충돌문제 방지 
컬렉션 <- 제네릭 
