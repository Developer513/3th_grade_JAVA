도입: 하나의 클래스에 모든 기능을 담는것은 복잡하기 때문에
간단하게 여러개를 작성하여 복잡성을 낮추겠다 
라는생각으로 도입된 것이 상속이다. 

상속(Inheritance)
객체지향의 상속 
부모클래스에 만들어진 필드, 메소드를 자식클래스가 물려받음
부모이 생물학적 특성을 물려받는 유전과 유사


상속을 통해 간결한 자식 클래스 작성
동일한특성을 재정의할 필요가 없어 자식 클래스가 간결해짐
공통기능을  하나의 클래스로 작성 
기능을 상속하여 새로운 클래스에서 사용 
중복제거 
 
상속의 장점 
클래스 간결화
멤버의 중복작성 불필요

클래스관리 용이
클래스들의 계층적 분류

소프트웨어의 생산성 향상
클래스 재사용과 확장 용이
새로운 클래스의 작성속도 빠름

자바의  상속선언 

public class Person{
    ...
}
public class student extends Person{// Person 을 상속받는클래스 

}
public class StudentWorker extends Student //studnet를 상속받는 클래스 

부모클래스 -> 슈퍼클래스로 부름
자식클래스 -> 서브클래스로 부름

class Point{
    private int x,y;
    public void set(int x int y){
        this.x = x; this.y = y;
    }
    public void showPoint(){
        System.out.println()
    }
}

class ColorPoint extends Point{ 상속
    private String color;
    public void setColor(String colot){
        this.color = color;
    }
    public void showColorPoint(){
        System.out.print(color);
        showPoint(); 
    }
}
public class ColorPointEx{
    public ststic void main(String[] args){
        Point p = newPoint();
        p.set(1,2);
        p.showPoint();

        ColorPoint cp = new ColorPoint()l
        cp.set(3,4); // 2중 상속도 가능 
        cp.setColor("red"); //color point에서 상속 
        cp.showColorPoint();
    }
}
(1,2)
red(3,4)
멤버변수를 private 로 숨기고 타 클래스에서는 메소드를 통해 변수 접근 
좋은 설계

서브클래스에서는 슈퍼클래스 메소드를 호출가능
자바 상속의 특징
다중상속을지원하지않음
예 부모가 2명
클래스의 다중상속은 지원하지않으나 인터페이스는 다중상속가능
상속횟후 무한으로 즐김
상속의 최상의 조상 클래스는 java.lang.Object 클래스
모든 큻래스는 자동으로 오브젝트 클래스를 상속받음
자바 컴파일러에 의해 자동으로 이루어짐


상속과 접근지정자
자바의 접근지정자 4가지
슈퍼클래스의 private 멤버 다른 모든클래스에서 접근 불허
슈퍼클래스의 default 멤버 
슈퍼 클래스의 디폴트 멤버는 패키지 내의 모든 클래스에 접근허용
상속을 받을때 패키지 내에 있으면 접근가능

슈퍼클래스의 protectde 멤버
같은 패키지 내의 모든 클래스 접근허용
다른 패키지에 있어도 서브 클래스는 슈퍼 클래스의 protected .멤버 접근가능  

class Person {
    private int weight;
    int age;
    protected int height;
    public String name;

    public void setWeight(int weight){
        this.weight = weight;
    }
    public int getWeight(){
        return weight;
    }
}

class Student extends Person{
    public void set(){
        age = 30;// 디폴트 접근가증
        name = "홍길동";// 퍼블릭 접근가능
        height = 175;//프로텍티드 접근가능
        weught = 99;//오류 프라이빗 접근불가 
        setWeight(99);메소드로 간접접근가능
    }
}

public class InheritanceEx
public static void main(String[] args){
    Student s = new Student();
    s.set();
}

}


서브클래스 객체가 생성될 때 서브 클래스의 생성자와 슈퍼 클래스의 생성자가 모두 실행되는가 아
아니면 서브 클래스의 생성자만 실행되는가

둘다 실행된다


서브 클래스의 생성자와 슈처클래스의 생성자중 누가 먼저 실행되는가
슈퍼클래스의 생성자가 먼저실행 부모자식순으로 실행 

서브클래스에서 슈퍼클래스의 생성자 선택
슈퍼클래스에 생성자가 여러개 있을때 상속클래스는 어떤걸 선택하는가 
인자가 아무것도 없는생성자를 기본생성자라고 하는데 
서브클래스에서 슈퍼클래스의 생성자를 선택하지 않으면 ㅅ슈퍼클래스의 기본생성자 선택
서브클래스에[서 슈퍼클래스의 생성자를 선택하는 방법

super(매개변수); 명시적으로 슈퍼클래스 생성자 선택
반드시 서브클래스 생성자 코드의 제일 첫줄

클래스에서 기본생성자를 만들지 않으면 자바 컴파일러가 만든다. 

다형성

업캐스팅
서브클래스의 객체는 
슈퍼클래스의 멤버를모두 가지고 있음
슈퍼 클래스의 객체로 취급 할 수 있음
사람은 생물이다의 논리와 같음
업캐스팅이란
서브 클래스 객체를 슈퍼 클래스 타입으로 타입변환


Student s = new Studnet();
Person p = s;//업캐스팅 , 자동타입변환

업캐스팅 된 레퍼런스
객체 내에 슈퍼 클래스의 멤버만접근가능
업캐스팅 되렴 ㄴ업캐스팅한 타입의 멤버만 사용가능 

다운캐스팅
슈퍼클래스 객체를 서브 클래스 타입으로 변환
개발자의 명시적 타입변환 필요

class Person {..}
class Student extends Perin{...}

Person p = new Student("이재문");//업캐스팅
Student s = (Student)p//다운캐스팅 student의 타입변환표시 필요
업캐스팅을  한 후 다운캐스팅 
instanceof 연산자와 객체의 타입판단
업캐스팅된 레퍼런스로 객체의 타입판단어려움
슈퍼클래스는 여러 서브 클래스에 상속되기 때문
instanceof 연산자 레퍼런스가 사리키는 객체의 타입식별을 위해 사ㅇㅅㅇ

객체레퍼런스 instanceof 클래스 타입 - > 참거짓
if(3 instnaceof int)문법오류 // 객체에 대한 레퍼런스만 사용

메소드 오버라이딩
슈퍼클래스의 메소드를 서브클래스에서 재정의 
슈퍼클래스 메소드는 무시됨
슈퍼클래스의 메소드이름 매개변수타입 및 개수 리턴타입 등 모든것이 동일하게 닥성 
동적바인딩발생

오버라이딩의
슈퍼클래스에 선언된메소드를 각서브 클래스들이 자신만의 내용으로 새로 구현하는 기능
상속을 통해 하나의 같은이름에 서로 다른 내용 구현이라는객체지향 실현
오버라이딩은 실행시간 다형성실현

동적 바인딩
실행 할 메소드를 실행시에 결정 객체생성을 프로그램이 ㄱ실행될 때 실시 
super();은 정적 바인딩 

추상클래스 
오버리아딩과 관련 
선언되어 있으나 구현되어있지 않은 메소드 abstract 로 선언한다
public abstract String getName();
public sbstract void setName(string s);
슈퍼클래스에서 정의만 하고 
서브클래스에서 정의 
추상 클래스의 2종류
추상 메소드를 하나라고 가진 클래스 클래스 앞에 반드시 abstract ㄹ라고 선언해야함
추상 메소드가 하나도 없징만 abstract 로 선언된 클래스 
추상클래스는 객체를 생성할 수 없다. 
서브클래스에서 슈퍼 추상 클래스의 메소드를 구현하면 일반 클래스가 됨 
인터페이스 
서브클래스가 슈퍼클래스를 오버라이딩 안하면 컴파일오류남 

추상클래스의 용도
설계와 구현을 분리 
슈퍼클래스에서는 개념정의 
각 서브클래스에서 구체적행위 구현 

계층적 상속관계를 갖는 클래스 구조를 만들 때  

인터페이스 
클래스가 구현해야 할 메소드들이 선언되는ㅍ추상형
모두 주상메소드
interface 로 키워드 선언
puvlic interface SerialDriver{...}
 상수와 추상 메소드로만 구현 멤버변수 사용불가 
 인터페이스 구성요소
 상수 public 만허용 
 추상메소드 public abstract 생략가능
 디폴트 메소드 인터페이스에 코드가 작성된 메소드
 인터페이스를 구현하는클래스에 자동상속
 퍼블릭 접근지정만 허용 생략가능
 프라이빗 메소드
 인터페이스 내에 메소드 코드가 작성되어야 함 
 인터페이스 내에 있는 다른 메소드에 의해서만 호출가능

인터페이스 특징
 스태틱 메소드 
 퍼블릭, 프라이빗 모두 지정가능 생략하면 퍼블릭
 인터페이스의 객체생성 불가 
 인터페이스 타입의 레퍼런스 변수 선언 가능 
 인터페이스의 다중상속 가능 
 
 인터페이스 구현
 인터페이스의 추상 메소드를 모두 구현한 클래스 작성 
 implement 키워드 사용  다중상속가능 
 예 서브 클래스가 class SamsungPhone implements PhoneInterface

 인터페이스 상속
 extends   키워드 이용

다중 인터페이스 상속

class ssmp implement mp3,mp2 

목적
인터페이스는 스펙을 주어 클래스 들이 그 기능을 서로 다르게 구현 할 수 있도ㅓ록 하는 클래스의 ㅋ
규격선언이며 클래스의 다형성을 실현하는 도구이다. 


클래스는 하나 이상의 인터페이스를 구현할 수 있음

class AIPhone implements MobilePhneInterface, allinterface  2개 

인터페이스를 구현하는 동시에 클래스를 상속받을수도 있다. 

추상클래스와 인터페이스 비교
유사점 : 객체를생성할 수 없고, 상속을 위한 슈퍼 클래스로만 사용 
클래스의 다형성을 실현하기 위한 목적

다른점
추상클래스는서브클래스에서 필요로하는 대부분의 기능을 구현하되
서브클래스에서 구현할 수 밖에 없는 기능만을 추상 메소드로 선언하여 서브클래스에서 구현하도록 하는목적
추상메소드와 일반메솓그 모두 포함
상수변수 필드포함

인터페이스는 객체의 기능을 모두 공개한 표준화 문서와 같은 것으로 개발자에게 인터페이스를 상속받는클래스의 
목적에 따라 인터페이스의 모든 추상 메소드를 만들도록 하는목적
변수필드(멤버변수)는 포함하지 않음
상수, 추상메소드 일반메소드 디폴트메소드 스태틱 메소드 모두 포함포르텍티드 접근지정 선언불가 
다중상속지원 

