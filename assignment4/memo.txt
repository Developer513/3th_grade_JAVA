main() 메소드 
main() 은 자바 응용프로그램의 실행시작 메소드 

public // 다른클래스에서 접근가능
static //  객체생성 전부터 호출가능 언제든지 시용가은
void // 리턴 값 없음 
main(String[],args)
String 은 매개변수 타입
args// 매개변수 
args는 변수명이므로 다르게 써도 됨 
main 메소드가 실행되면서 전달하고 싶은 값이 있다면 args를 이용한다. 
외부에서 실행 시 명령행 인자가 args 를 통해서 메인메소드로 전달된다
기존에는 데이터 입력으로 스캐너를 사용했다
이 방법은 프록그램 실행중에 값을 전달한다. 
명령행 인자는 프로그램 시작 시점에 데이터를 넘겨줄 수 있다
명령행 인자의 데이터 타입은 String 이다. 

자바의 예외처리 
자바의 장점 : 이식성 ,신뢰성(오류가 작은 프로그램을 만들 수 있음)
자바는c 에 비해 오류에 대한 비교적 자세한 메시지를 준다 
컴파일오류 : 문법에 맞지않게 작성된 코드
예외 : 오동작이나 결과에 악영향을 미칠 수  있는 실행중 발생한 오류
예: 정수를 0으로 나누는 경우
배열보다 큰 인덱스로 접근 
자료형이다른 데이터 입력

자바는 이러한 예외처리가 가능하도록 설계되었다
예외가 발생 -> 자바 플랫폼인지-> 응용프로그램 에서 전달 
응요프로그램이 예외를 처리하지 않으면 강제종료 

예외처리
어떤예외가 발생 할 때 대응하는 응용프로그램 코드 
try-catch-finally 문 사용 
finally 블록은 생략가능
try{
    예외가 발생할 가능성이 있는 실행문
}
catch(처리할 예외타입선언)예외타입이 선언된 것들만 동작{    
    예외처리문
}
finally{
    예외처리(생략가능)
}
위 코드들 중 try 실행문에서 예외가 발생할 경우 catch,finally 가 동작한다. 


자주발생 예외타입선언 예외 클래스 라고도 함  
ArithmeticExrption정수 0으로 나눔
NullPointException 
.
.
.
근데 0.0으로 나누면 오류 메세지가 안뜬다
이 내용은 double클래스에 정의되어 있다. 
infinity
NaN not a number 라는 특수한 값을 반환한다. 
'
NaN 예 
System.out.ptintln(0.0/0.0); ->> NaN
System.out.ptintln(0.0%0.0);
System.out.ptintln(Math.sqrt(-2.0));
infinity예
System.out.ptintln(Double.MAX_VALUE*2 );

if(Double.isNaN(0.0/0.0))System.out.println("Yes, NaN") ->Yes, NaN
if((0.0/0.0)==Double.NaN)systemout("Yes, NaN")
else System.out.println("SomeThingWrong") -> NaN은 숫자가 아니라 비교불가 

System.out 은 표준출력으로 화면에 출력하는 기능을한다. 
System.err 은 표준오류로 오류메시지를 출력하는 것이다. 실제 출력되는곳은 화면이다. 
특별한 지정이 없으면 둘의 기능은 같다. 

객제체향 프로그래밍 
이미 사용하고 있었다.
System.out.println
클래스.객체. 

실세계 객체의 특징 객체마다 고유한 특성(state)와 행동을 가짐
다른객체들과 정보를 주고받는 등 상호적상용하면서 존재 

컴퓨터 프로그램에서 객체
테트리스 게임의 각 블록
한글프로그램 메뉴나 버튼 

객체중심특성=객체지향특성
캡슐화 : 객체를 캡슐로 싸서 내부를 볼 수 없게 하는것
외부의 접근으로부터 객체보호 
자바의 캡슐화 -> 클래스 :객체모양을 선언한 틀 
메소드(함수)와 필드(멤버변수)는 모드 클래스 내에 구현 
객체 : 클래스의 모양대로 생성된 실체(인스턴스)
객체외부에서는 비공개 멤버에 직접 접근할 수 없다 (캡슐화지향)
객체외부에서는 공개된 메소드(public)를 통해 접근 
상속 
상위 개체의 속성이 하위 개체에 물려짐
하위개체가 상위 개체의 속성을 모두 가지는 관계 

실세계 상속 예시 
나무는 식물의 속성과 생물의 속성을 모두가짐 

생물
^//상속 
식물
^ 
나무

자바의 상속 
부모클래스 : 슈퍼클래스 
하위클래스 : 서브클래스 슈퍼클래스를 재사용하고 새로운 특성 추가 
class Animal{

}
class Human extend Animal{

}
 이때 휴먼은 상위 클래스 애니멀로부터 상속받음 이때 휴먼클래스는 애니멀 클래스에 정의된 멤버와 메소드를 모두가짐 

 객체지향의 특성 다형성 
 같은 이름의 메소드가 클래스나 객체에 따라 다르게 동작하도록 구현 
 예 : 메소드 오버로딩: 같은이름이지만 다르게 작동하는 여러 메소드
 메소드 오버라이딩 슈퍼클래스의 메소드를  서브클래스마다 다르게 구현

 public class Circle{
     public int radius;
     public String name;
     public Cricle(){
            //생성자 메소드는 리턴타입을 가지지 않는다.
     }
     public double getArea(){
         return 3.14*radus*radious;
     }
 }
 z클래스 이름과 같은 메소드  생성자 메소드 

 클래스는 class 라는 키워드로 선언한다. 
 public이면 다른클래스에서 클래스를 사용하거나 접근가능 
 필드의 접근지정자 public 이면 다른 모든클래스 접근허용
 필드나 메소드 앞에 붙어 다른 클래스의 접근허용을 표시
 생성자
 클래스의 이름과 동일한 특별한메소드
 객체가 생성될 때 자동으로 한 번 호출되는 메소드
 개발자는 객체를 초기화 하는데 필요한 코드 작성 

 객체 생성 
 반드시 new 키워드를 이용하여 생성 
 new 를 사용하면 객체의 생성자 호출 
 생성과정 
 객체에 대한 레퍼런스 변수 선언 
 객체생성:" 클래스타입크기의 메모리 할당, 객체 내 생성자 코드 실행 
 객체의 멤버접근
 객체 레퍼런스.멤버 
