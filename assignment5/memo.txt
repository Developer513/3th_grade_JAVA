프로그래밍의 왕도 
직접 하는 것
객체지향언어의 목적 
소프트웨어 생산성 향상
객체지향언어(상속,다형성,객체,캡슐화 등 소프트웨어 재사용을 위한 여러장치 내장)
소프트웨어 자사용과 부분수정이 빠름
싱세계에 대한 쉬운 모델링

컴퓨터초기 시대의 프로그래밍
수학계산/ 통계처리를 하는 등 처리과정, 계산절차 중요

현대의 프로그래밍 
컴퓨터가 산업전반에 활용
실세계에서 발생하는 일을 프로그래밍
실세셰에서는 절차나 과정보다 물체즐의 상호작용으로 묘사하는 것이 용이
객체지향언어 실세계헤의 일일 보다 쉽게 프로그래밍하기 위한 객체지향적언어

절차지향프로그래밍
작업순서를 표현
작업을 함수로 작성한 함수들의 집합  
객체지향프로그래밍
객체즐간의 상호작용으로 표현
클래스 혹은 객체들의 집합으로 프로그램 작성 

public class Circle{
    int radious; // 원의 반지름 필드
    String name; // 원의 이름 필드

    public Circle(){}// 원의 생성자

    public double getArea(){ 원의 면적 계산 메소드
        return 3.14*radius;
    }
}

    public static void main(String[] args){
        Circle pizza;
        pizza = new Circle();//객체 생성 
        pizza.radius = 10;
        pizza.name = "자바피자;
        double area = pizza.getArea();
        System.out.println(pizza.name + "의 면적은" + area);

        Circle donut = new Circle();
        donut.radious = 2;
        donut.name = "자바도넛";
        area = donut.getArea();
        System.out.println(donut.name + "의 면적은" + area);
    }
}


생성자 객체가 생성될 때ㅔ 초기화를위해 실행되는 메소드

클래스와 같은이름을 가진 메소드
생성자는 리턴타입이 없음
메소드 오버로딩 : 같은이름의 메소드를 여래개 만드는 것  
overloading 과부하
메소드 오버로딩 규칙 
매개변수의 수와 타입을 가지고 같은이름의 메소드를 구분가등

생성자의 특징
생성자는 메소드
생성자 이름은 클래스 이름과 반드시 동일 
생성자 여러개 작성가능(오버로딩)
생성자는 new를 통새 객체를 생성할 때 객체당 한번 호출
생성자는 리턴타입을 지정 할 수 없음
생성자의 목적은객체 초기화
생성자는 객체가 생성될 떄 반드시 호출됨
그러므로 하나이상 선언되어야함

기본생성자 
매개변수없고 아무작업없이 단순리턴하는생성자
클래스에 생성자가 하나도 선언되지 않은경우 컴파일러에 의해 자동으로삽ㄴ입

 this레퍼런스
객체 자신에 대한 레퍼런스
컴파일러에 의해 자동관리 
개발자는 사용하기만 하면 됨,
this.멤버 형태로 사용

public calss Circle{
    int radious;
    public Circle() {radius = 1;}// ->public Circle(){this.radius = 1;}이라고 써도됨
    public Circle(int i) {radius = r;} //->public Circle(int radius){ this.radius = radius;}
    double getArea(){
        reuturn 3.14*radius*radius;
    }
}
this가 필요한 경우
객체의 멤버변수와 메소드 변수의 이름이 같은경우
다른메소드 호출 시 객체 자신의 레퍼런스를 전달 할  때
메소드가 객체 자신의 레퍼런스를 호출할 때 

this() 로 다른생성자 호출
클래스 내의 다른생성자 호출
생성자 내에서만 사용가능
반드시 생성자 코드의 제일 처음에 수행
this(안에 형식에 맞는매개변수를 적으면 해당 매개변수와 일치하는 생성자 호출)
멤버변수 직접접근 금지 

객체의 치환
객체의 치환은 객체가 복사되는것이 아니며 레퍼런스가 복사된다. 

객체배열
Circle[] c; corcle 배일여 대한 레퍼런스 변수 c 선언
c = new Circle[5]; 레퍼런스 배열 생성
for(int i=0;i<c.length;i++) System.out.print((int)(c.[i].getArea())+"");// 배열에 잇는 모든 Circle 객체의 면적 출력

객체배열 만들기 연습
class Book{
    String title,author;
    public Book(String title, String author){
        this.title = title;
        this.author = author;
    }
    public String getTitle(){
        return title;
    }
}

public class BookArray{
    public static void main(String[] args){
        Book[] book = new Bool[2];//
        
        Scanner scanner = new Scanner(System.in);
        for(int i=0;i<book.length;i++){
            System.out.print("제목>>";
            String title = scanner.nextLinr();
            System.out.print("저자>>");
            Sting author = scammer.nextLine();
            book[i] = new Book(title,author);
        }
        for(int i=0;i<booklength;i++){
            System.out.print("("book[i].title + ","+ book[i].author + ")");//이렇게 쓰는것은 좋지않다
            System.out.print("("book[i].grtTitle() + ","+ book[i].author + ")");/클래스에 메소드를 선언하고 
        }// 이렇게 호출하는것이 좋음 
    }
}

메소드의 형식
c의 함수와 같다 단 클래스 멤버에 속한다 
접근지정자 리턴타입 이름(매개변수)

자바의 인자전달방식
기본타입의 값이 전달되는 경우 (call by value)
매개변수가 바이트 인트 더블 등 기본타입일 경우
호출자가 건네는 값이 매개변수에 복사되어  전달 실인자 값은 변경되지 않음 
예) 메인 메소드에서 정수형 버ㅕㄴ수를 선언하고 해당변수를 다른클래스에서 정의된 메소드의 매개변수로 넣고 
그 변수를 프린트하면 메소드의 리턴값이 아닌 메인메소드에서 정의했던 정수값이 나온다. 
메소드 내부에서만 값이 바뀜

객체가 전달되는 경우 (call by refrence)
객체의 레퍼런스만 전달 
매개변수가 실인자 객체 공유 
메인메소드에서 선언된 객체를 다른클래스에서 정의된 메소드의 매개변수로 넣으면 이때 매개변수로 들어가는 객체는
실제 데이터를 저장하는 공간역할이 아니라 메인메소드에서 선언된 인자의 레퍼런스(화살표,포인터) 이기 때문에 메소드에서 해당
레퍼런스로 인자에 접근하여 값을 리턴한다 따라서 메인메소드에서 값을 호출하면 메소드에서 변경된 값이 리턴된다. 

배열이 전달되는 경우 
객체전달과 원리가 동일하다
배열의 레퍼런스만 메소드로 전달되어 연산 후 각 레퍼런스에 해당하는 값이 바뀐다. 
즉 메인메소드에서 선언된 i개의  배열에서 배열이름을 메소드의 매개변수로 넣으면 배열값이 바뀜
매개변수가 실인자의 배열을 공유 

메소드 오버로딩 
이름이 같은 메소드 작성 
매개변수의 개수나 타입이 서로 다르고 이름이 동일한 메소드들
리턴타입은 오버로딩과 관련없음
메소드이름이 같은데 리턴타입이 다르다고해서 오버로딩이 되는것이 아님  

class Method(){
    public int m1(int i){
        return i+1;
    }
    public int m1(short s){
        return s+2;
    }
    public int m2(int i){
        return i+3;
    }
}
public class MethodOverloading{
    public static void main(String[] args){
        Method() mo = new Method();
        System.out.println(mo,m1(5));       //6
        System.out.println(mo.m1(short)5)); //7
        System.out.println(mo,m1(byte)5);   //7 // 타입이 맞지않더라도 호환이되면 실행이 가능하다. 
        System.out.println(mo,m2(5));       //8
        System.out.println(mo,m2(short)5);  //8
        System.out.println(mo,m2(byte)5);   //8
    }
}



객체의 소멸과 가비지 컬렉션
객체소멸 new 에 의해 할당된 객체 메모리를 자바 가상기계의 가용 메모리로 되돌려 주는 행위
자바 응용프로그램에서 임의로 객체를 소멸할 수 없음 
객체 소멸은 자바 가상기계의 고유한 역할 // 알아서 없애줌

가비지 가리키는 레퍼런스가 하나도없는객체->누구도 사용할 수 없게 된 메모리

사례 
Person a,b;
a = new Person("최진서");
b = new Person("JS Choi");
b = a;// b 가 가리키던 객체는 가비지가 됨 jvm이 알아서 수집한다. 

가비지컬렉션 스레드에 의해 수행

개발자에 의한 강제 가비지 컬렉션 
System.gc()// 가비지컬렉션 요청 


접근지정자 
목적
클래스나 일부 멤버를 공개하여 다른클래스에서 접근하도록 허용
객체지향언어의 캡슐화 정책은 멤버를 보호하는것

자바 패키지 개념
관련있는 클래스 파일을 저장하는디렉터리 
자바 응용프로그램은 하나 이상의 패키지로 구성

클래스 접근지정
public 모든 클래스에서 허용
private 외부로부터 차단 클래스 내에서만 사용가능
default (생략) 동일패키지내에섭 사용가능
protected  동일패키지와 자식클래스에서 허용

멤버 접근지정 클래스 접근지정과 동일
만약 public 클래스 안에서 privaite 멤버를 선언하면 다른클래스에서 그 멤버에 접근 할 수 없다. 
디폴트도 마찬가지 클래스가 퍼블릭이라도 다른 패키지에서 해당 멤버 접근 불가능 

static 정적 

static멤버
객체마다 생기는 것이 아님
 클래스당 하나만 생성됨
 클래스 멤버라고 부름
 객체를 생성하지 않고 사용가능
 공간적 특성 클래스당 하나만 생성
 시간적 특성 멤버들은 클래스가 로딩될 때 공간할당
 공유의 특성 멤버들은 동일한클래스의 모든객체에 의해 공유 

non-static멤버
공간적 특성- 멤버들은 객체마다 독립적으로 별도 존재
인스턴스 멤버라고 함
시간적 특성 필드와 메소드는 객체생생 후 사용가능
비공유 특성 멤버들은 다른객체에 의헤 공유되지 않고 배타적
클래스코드가 적재되는메모리에 생성

어떤클래스에 논스태틱변수하고 스태틱변수가 있을때 

메인메소드에서 클래스를 선언하면 스태틱변수는 따로 메인메소드에서 new 로 객체를 선언하지 않아도 쓸 수 있다.
스태틱멤버는 객체이름을 쓰지 않고 클래스 이름을 쓰고 바로 쓸 수 있음 

System.out.print 
System 이라는 클래스 안에 static 멤버 out  이 있다. 

static 활용
전역변수와 전역함수를 만들 때 사용
전역변수나 전역 함수는 static으로 만들 때  활용
전역변수나 전역 함수는 static으로 클래스에 작성


static 메소드의 제약조건 
static 메소드는 논스태틱 멤버에 접근할 수 없음 
객제가 생성되지 않는상황에서도 스태틱 메소드는 실행 될 수 있기 때문에 논스태틱 메소드와 필드 사용불가 
반대로 논스태틱 메소드는 스태틱 메소드에 접근가능
this 레퍼런스 사용불가 

final 클래스 - 클래스 상속불가 
extends 불가 

final 메소드 
오버라이딩 불가 
final 의 의미는 상속불가
final 필드 상수선언 상수를 선언할 때 사용
변경이 안됨 
 상수선언은 대문자로 선언 (관습)
 클래스는 대문자 

 프로그래밍 주의점 
 1. 2개 이상의 클래스를 작성한다. 하나의 클래스에는 한가지 일만
 2. 멤버변수는 private 로 지정한다.  final은 예외 
 3. 메소드는 public 으로 지정한다. 클래스 내부에만 시용되는 메소드는 예외 
 객체를 블랙박스의 역할을 하도록 바깥쪽에서 보이지 않게 설계 
 객체 안에서만 멤버를 쓸 수 있게 외부와의 인터렉션은 퍼블릭으로 선언된 메소드로 인터렉션한다. 
 "캡슐화"