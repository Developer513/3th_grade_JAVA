패키지 개념과 필요성

디렉터리로 각 개발자의 코드관리 
같은 이름의 클래스가 있어도 다른 경로(패키지)에 존재하면 구별가능
서로 다른파일로 취급된다. 

모듈과 패키지클래스파일을 하나의 디렉터리로 묶어놓은것이다.
모듈 여러 패키지와 이미지 등의 자원을 모아놓은 컨테이너
클래스들을 패키지로 만들고 다시 패키지를 모듈로 만듦
패키지와 클래스의 경로는 / 대신 . 을 사용하여 나타낸다. 

import 문 
import 를 사용하지 않는 경우 예) 클래스 안에서 사용할 때 java.util.Scanner scanner 이라고도 쓸수있음
패키지 내의 모든 클래스 포함 import.java.util.* 
*는 현재 피키지 내의 클래스만을 의미하며 하위 패키지의 클래스까지 포함하지는 않는대

패키지 만들기 
패키지 선언
pakage 패키지명;
컴파일한 클래스 파일을 패키지명의 디렉터리에 저장하는 지시

예) 
pakage UI;

public class Tools{
    ...
}

Tools 클래스의 경로명은 UI.Tools
다른클래스에서 Tool 클래스를 사용하기 위해서는 import UI.Tools 라고 한다. 

디폴트 패키지 
패키지 선언문이 없이 만들어진 클래스의 패키지

패키지의 특징
패키지 계층구조 관리용이
패키지별 접근제한
public 
private
default
protected
통일한 이름의 클래스와 인터페이스 사용가능
높은 재사용성 

주요 패키지 

util  유틸리티 패키지 날짜시간 벡터 해시맴

lang 기본 패키지 -> 자동으로 import, String,System 클래스 등 

io 키보드 모니터 프린터 디스크 등에 입출력 클래스 와 인터페이스 제공

awt 자바 GUI 프로그래밍을 위한 클래스와 인터페이스

swing GUI 프로그래밍을 위한 스윙 패키지 

http://docs.oracle.com/javase/10/docs/api/

Object 클래스 모든 클래스의 슈퍼클래스
lang 패키지에 포함모든 클래스에 강제상속
따라서 해당 메소드 사용가능 


class Point{
    int x,y;
    public Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}
public class ObjectPropertyEx{
    public static void print(Object obj){
        System.out.println(obj.getClass().getName());//클래스 이름
        System.out.println(obj.hashcode());//해시코드 값 모든 객체의 고유의 값
        System.out.println(obj.toString());//객체를 문자열로 만들어 출력
        System.out.println(obj);//객체출력
    }
}

obj.toString()// 객체를 문자열로 반환 
클래스이름@ 16진수 해시코드 출력 
toString() 오버라이딩 가능
객체_ 문자열-> 객체.toString()

Point p = new Point(2,4);
예) System.out.println(p); 는  System.out.println(p.toString()); 으로 바뀐다. 
    String s = p + "점" ;       String s =p.toString()+"점" 으로 바뀐다. 
    Point@ 3225ab

    자동으로 변환되기 때문에 원하는대로 오버라이딩 후 쓸수 있다. 

객체비교와 equals()
객체를 비교해서 같은지 판별하는 메소드
== 연산자로 객체를 비교할 때 객체의 원소가 같아도 레퍼런스가 다르면 FALSE 를 출력함
물론 객체의 레퍼런스가 같으면 참이다. 

equals()는
 두 객체의 원소값을 직접 비교한다, 
 a.equals(b)   a.x = 1 b.x = 1 이면 같다. 

 Wrapper 클래스 
 int a; 일 때 a는 객체가 아니다. 
Integer a 는 객체로 취급한다. int 를 싸고있는 클래스 
기본타입을 클래스화 한 8 개 클래스 
용도  기본타입의 값을 객체로 다룰 수  있게 함.  

객체.메소드 

클래스.메소드 스태틱 메소드 일대 이렇게 적을 수 있다. 
예 Integer i = Integer.valueOf(10) ;
예 Integer i = Integer.valueOf("10") ; //형도 바꿀수 있다. 스트링을정수로 변환 가능 

main(Sting[] args){
    Integers.valueOf(srgs[]); // 스트링에서 인티저 객체가 만들어짐 ??
}

deprecated  더이상 사용하지 않는 형식 또는 메소드 

Wrapper 클래스 의 주요 메소드가 거의 static  타입니다. 


Wrapper 객체로 부터 기본타입 값 알아내기 
Integer i = Intege.valueOf(10);
int ii = i.intValue(); // ii = 10

문자열을 기본 데이터 타입으로 변환 
int i = Integer.parseInt("123"); // i = 123 스트링을 기본타입의 정수값

박싱과 언박싱 

박싱 : 기본타입의 값을 Wrapper 객체로 변환 
Integer ten = 10; 이라고 하면 자동박싱되어  Integer ten = Integer.valueOf(10);으로 자동처리 해준다
int n = ten; // 자동 언박싱  int n = ten.intValue();

String 의 특징과 객체생성

스트링 클래스는 하나의 문자열 표현
String str1 = "abcd";
char data[] = {'a','b','c','d'};
String str2 = new String(data);
String str3 = new String("abcd");
동일한 값으로 여러 표현 가능 

스트링 생성자
String()  빈 스트링 객체 생성

String(char[] value) char 배열에 있는 문자들을 스트링 객체로 생성 

String(String original) 매개변수로 주어진 문자열과 동일한 스트링 객체 생성

스트링 리터럴과 new String()

스트링 생성방법 

리터럴로 생성 String s = "Hello"; "" 따ㅣ옴표를 치는 경우를 리터럴이라고 함   
만약
String a = "Hello";
String c = "Hello"; 
같이 같은 리터럴로 정의되어있는 서로 다른 String이  있다면 
 JVM 에서 스트링 리터럴 테이블에서 Hello 리터럴을 공유한다., 
즉 레퍼런스가 같다. 
근데 리터럴로 선언한 스트링 객체는 수정이 불가능하다. 

객체로 생성
String b = new Srting("Java")
String d = new Srting("Java")
이렇게 생성하면 힙 메모리 라는 곳에 값이ㅣ 저장되는데
값이 같더라도 객체가 서로 다르면 다른 값이 된다. 
각 객체 레퍼런스가 개별적임 

스트링 객체의 주요 특징
스트링 객체는 수정 불가능 한번 만들어진 스트링 객체는 수정 불가늘 
String s = new String("Hello");
String t = s.concat("Java");  메소드는 기존 스트링 객체에 매개변수문자열을 붙이는 메소드이다. 
근데 기본 객체가 수정이 되는것이 아니라 새로 생기는 것이다ㅓ. 
스트링 비교시 반드시  equals 사용 

주요 메소드 
compareTO()두 스트링을 사전 순으로 비교하여 두 스트링이 같으면 0, 현재 스트링이 비교스트링보다 먼저 나오면 음수 아니면 양수

abc <baaaa
스트링 메소드들은 원래 선언된 스트림 객체를 수정하는것이 아니다
변경된 값의 객체를 새로 생성한다. 

문자열 연결 
+ 연산자로 연결 
객체는 객체.toString() 을 호출하여 문자열로 변환하여 연결한다. 
기본타입 값은 문자열로 변환하여 연결 

concat()
String s1 = "abcd";
String s2 = "efgh";

s1 = s1.concat(s2); 라고 하면 
s1 의 "abcd" 가 "abcdefgh" 로 수정되는 것이 아닌 s1 객체가 새로운 스트링 객체 "abcdefgh" 를 가리키게 되는것이다
레퍼런스만 바뀜

StringBuffer 클래스
기본적인 기능은 String 클래스와 같음 
근데 문자열이 변경이 가능하다 
StringBuffer 객체의 크기는 스트링 길이에 따라 가변적이다. 
생성자
StrinfBuffer() = 초기버퍼크기가 16인 객체 생성 

StringBuffer append(String str) str 스트링을 스트링 버퍼에 붙인다. 
StringBuffer sb = new StrinfBuffer("a"); 
sb.append(" pencil:);
sb.insert(2, "nice); 
String index from 2  nice
result nice pencil
새로운객체 생성없이 추가 가능 concat 와 차이 

sb.replace(2,6,"bad") -> 스트링 인덱스 2~6 까지를 bad 로 바꿈
nice pencil -> bad pencil 부족한 글자는 공백으로 채우는게 아니라 6-1 즉5까지만 바꿈 정의가 그래 
범위 정하는 StringBuffer 메소드는 거의 그렇다고 생각해
if StringBuffer.somemethod(2,5) 이면 2~4 까지임

StringTokenizer 
java.util.StringTokenizer 에 포함 
하나의 문자열을 여러 문자열로 분리
문자열을 분리할 때 사용되는 기준 문자 : 구분문자 

String query = "name=litae&addr=seoul&age=21;
StringTokenizer st = new StringTokenizer(query,"&");
& 글자를 기준으로 분리 
그러면 한 객체에 분리된 문자열이 토큰으로 저장된다. 
토큰 

생성자 
StringTokenizer(String str) str 스트링의 각 문자를 구분 문자로 문자열을 분리하는 스트링 토크나이저 생성 
StringToknizer(String str, String delim) str 스트링과 delim 구분 문자로 문자열을 분리하는 스트링 토크나이저 생성

String  클래스의 split 보다 편리 

주요 메소드 

public class StringTokenizerEx{
    public static void main(String[] srgs){
        StringTokenizer st = new StringTokenizer("홀길동/장회/홍련/콩쥐/팥쥐","/");
        while(st.hasMoreToken())// 
        system.out.println(st.nextToken());
    }
}
결과 홍길동
장화
홍련
콩쥐 
팥쥐 
